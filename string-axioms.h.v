(* Generated by Frama-C WP *)

Goal typed_lemma_exists_first.
Hint exists_first,property.
Proof.
  intros.
  destruct H0.
  destruct H0.

  destruct Q_exists_first_2 with (i := x) (t := t) (a := a); auto with zarith.
  + exists x.
    split; auto with zarith.
  
  + destruct H2.
    destruct H2.
    destruct H3.
    destruct H4.
    exists x0.
    split; auto with zarith.
Qed.

Goal typed_lemma_exists_first_2.
Hint exists_first_2,property.
Proof.
  intros.
  induction i using Z_induction with (m := 0%Z).
  + assert (i = 0); auto with zarith.
    assert (
      (t .[ shift_sint8 a 0] = 0) \/ (t .[ shift_sint8 a 0] <> 0)
    ) as choice.  tauto.
    destruct choice.
    * right.
      exists 0.
      split; auto with zarith.
    * left.
      intros.
      rewrite H2 in *.
      assert (i_1 = 0); auto with zarith.
      rewrite H6 in *.
      auto with zarith.

  + destruct IHi; auto with zarith.
    * assert (
        (t .[ shift_sint8 a (i + 1)] = 0) \/ (t .[ shift_sint8 a (i + 1)] <> 0)
      ) as choice.  tauto.
      destruct choice.
      - right.
        exists (i + 1).
        split; auto with zarith.
      - left.
        intros.
        assert ((i_1 = (i + 1)) \/ (i_1 < (i + 1))) as cc. {
          apply or_comm.
          apply Zle_lt_or_eq.
          auto.
        }
        destruct cc.
        -- rewrite H6 in *.
           auto with zarith.
        -- assert (i_1 <= i).
           auto with zarith.
           apply H2; auto with zarith.

    * right.
      destruct H2.
      destruct H2.
      destruct H3.
      destruct H4.

      exists x.
      split; auto with zarith.
Qed.


